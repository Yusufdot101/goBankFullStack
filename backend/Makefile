###################################################################################################
#	                                        HELPERS	                                              #
###################################################################################################
## help: print this help messaeg
.PHONY: help
help:
	@echo 'Usage'
	@sed -n 's/^##//p' ${MAKEFILE_LIST} | column -t -s ':' | sed -e 's/^/ /'

.PHONY: confirm
confirm:
	@echo -n 'Are you sure? [y/N]' && read ans && [ $${ans:-N} = y ]


###################################################################################################
#	                                      DEVELOPMENT	                                          #
###################################################################################################
current_time = $(shell date --iso-8601=seconds)
# it will be in the format "{tag}-{number of additional commits}-g{abbreviated commit hash}"
git_description = $(shell git describe --always --dirty --tags --long)
linker_flags = '-s -X main.buildTime=${current_time} -X main.version=${git_description}' 
## build/api: build the cmd/api application
.PHONY: build/api
build/api:
	@echo 'Building...'
	@go build -ldflags=${linker_flags} -o=./bin/api ./cmd/api
	@echo 'Done'

## run/api: run the cmd/api application
.PHONY: run/api
run/api:build/api
	@./bin/api -db-dsn=${db-dsn}

## db/migrations/new: create a new database migration
.PHONY: db/migrations/new
db/migrations/new:
	@echo 'Creating migration files for ${name}...'
	@migrate create -seq -ext=.sql -dir=./migrations ${name}

## db/migrations/up: apply all up database migrations
.PHONY: db/migrations/up
db/migrations/up: confirm
	@echo 'Running up migrations...'
	@migrate -path ./migrations -database ${DB_DSN} up

## db/migrations/down: apply all down database migrations
.PHONY: db/migrations/down
db/migrations/down: confirm
	@echo 'Running down migrations...'
	@migrate -path ./migrations -database ${DB_DSN} down

###################################################################################################
#	                                       QUALITY CONTROL	                                      #
###################################################################################################
.PHONY: audit
audit: vendor
	@echo 'Formatting code...'
	@go fmt ./...
	@echo 'Vetting code...'
	@go vet ./...
	@staticcheck ./...
	@echo 'Running tests...'
	@go test -race -vet=off ./...
	@echo 'Done'

.PHONY: vendor
vendor:
	@echo 'Tidying and verifying module dependencies...'
	@go mod tidy
	@go mod verify
	@echo 'Vendoring dependencies...'
	@go mod vendor
	@echo 'Done'
